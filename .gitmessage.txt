## 🎯 깃 커밋 메시지 컨벤션

### 📋 커밋 메시지 구조
```
<emoji> <type>: <subject> (50자 이내)

<body> (선택사항, 72자 이내)
- 변경 사항의 이유
- 주요 변경 내용

<footer> (선택사항)
Resolves: #123
See also: #456, #789
```

### 🏗️ 프로젝트 & 빌드
- 🎉 init: 프로젝트 초기 설정
- 🔧 config: 설정 파일 추가/수정
- 🐳 chore: 빌드, 패키지 매니저, 기타 유지보수
- 👷 ci: CI/CD 파이프라인 구성
- 🚀 deploy: 배포 관련 작업
- 📦 package: 패키지 추가/업데이트
- 🔖 release: 버전 태그, 릴리즈

### ✨ 기능 개발
- ✨ feat: 새로운 기능 추가
- 🚧 wip: 진행 중인 작업
- ⚡ perf: 성능 개선
- ♻️ refactor: 코드 리팩토링
- 🏗️ arch: 아키텍처 변경

### 🐛 버그 & 보안
- 🐛 fix: 버그 수정
- 🚑 hotfix: 긴급 버그 수정
- 🩹 patch: 간단한 패치
- 🔒 security: 보안 이슈 해결
- 🔐 auth: 인증/권한 관련

### 🧪 테스팅 & 퀄리티
- ✅ test: 테스트 추가/수정
- 🧪 experiment: 실험적 코드
- 📈 analytics: 분석/모니터링 코드 추가
- 🚨 lint: 린트 오류 수정

### 💄 UI/UX
- 💄 style: UI/스타일 변경
- 🎨 design: 디자인 변경
- 📱 responsive: 반응형 디자인
- ♿ a11y: 접근성 개선
- 🌐 i18n: 국제화/현지화

### 📚 문서화
- 📝 docs: 문서 추가/수정
- 💡 example: 예제 코드 추가
- 📄 license: 라이센스 변경
- 💬 comment: 주석 추가/수정

### 🗂️ 파일 관리
- 🚚 move: 파일/폴더 이동 또는 이름 변경
- 🔥 remove: 코드/파일 삭제
- 🗑️ deprecate: 코드 deprecation
- 🎨 assets: 에셋(이미지, 아이콘 등) 추가/수정

### 🔀 버전 관리
- 🔀 merge: 브랜치 병합
- ⏪ revert: 커밋 되돌리기
- 🍒 cherry-pick: 특정 커밋 선택 적용
- 📌 pin: 의존성 버전 고정

### 🔧 구조 & 데브 옵스
- 🐳 docker: Docker 관련 작업
- ☸️ k8s: Kubernetes 관련 작업
- 🌱 seed: 시드 데이터 추가
- 🗄️ db: 데이터베이스 관련 변경
- 🔊 log: 로그 추가/수정

### 📊 데이터 & 분석
- 📊 data: 데이터 처리 로직
- 📈 metric: 메트릭/측정 코드
- 🔍 seo: SEO 최적화

### ⚠️ 특이 케이스
- 🚨 breaking: Breaking Change
- 🧹 cleanup: 코드 정리
- 💩 dirty: 나중에 개선이 필요한 코드
- 🙈 ignore: .gitignore 수정
- ⬆️ upgrade: 의존성 업그레이드
- ⬇️ downgrade: 의존성 다운그레이드

### 💼 실무 사용 예시
```bash
# 기능 추가
✨ feat: implement user authentication with JWT

# 긴급 수정
🚑 hotfix: fix critical payment processing error

# 성능 개선
⚡ perf: optimize database query for user search

# 리팩토링
♻️ refactor: restructure user service layer

# 배포
🚀 deploy: release v2.1.0 to production

# Breaking Change
🚨 breaking: change API response format for /api/users
```

### 🎯 베스트 프랙티스
1. 명확성: 변경사항이 무엇인지 한눈에 알 수 있게 작성
2. 일관성: 팀 내 합의된 컨벤션 준수
3. 추적성: 이슈 번호 반드시 포함
4. 원자성: 하나의 커밋은 하나의 논리적 변경사항만 포함